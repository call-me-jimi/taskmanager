TASKMANAGER
===========

TaskManager is an open source infrastructure software for distributing and managing calculation jobs
in a Unix computer cluster environment. The TaskManager was designed to control a set of hosts even
if you are not the administrator of the system. The hosts are embedded in a Unix environment and the
user's home directories are mounted on each host. The hosts may have different numbers of CPUs/cores
and operating systems. Keep in mind that a user should be able to log into each host via
ssh. However, users should use the TaskManager to submit calculation jobs to the cluster to avoid an
overload of the hosts and to a a proper scheduling. Jobs which are under the control of the
TaskManager are executed on a host of the computer cluster with the rights of the respective user to
ensure that the executing jobs have the permission to access the user's files.

The TaskManager package consists of several servers, TaskDispatcher, TaskManagerServer, and
TaskManagerMenialServer, which communicate with each other. Furthermore, clients may send requests
to one of these servers. Behind all servers there is a MySQL database. The main server,
TaskDispatcher, stores detailed information about jobs of users and sends jobs to vacant hosts of
the cluster, if possible. A TaskManagerServer (TMS) is automatically invoked by each user,
respectively. The user sends all his requests (usually via a client) to his own TMS, which in turn
communicates with the TaskDispatcher. A TaskManagerMenialServer (TMMS) is invoked automatically by
each user on each host. The TMMS is responsible for executing the user's jobs. The TaskDispatcher
and TMMS store and modify all information about jobs, hosts, users in the database. Other
clients/applications could access this database.


System requirements
===================

- Unix system with a python installation
- One or more computers with one or more cores
- Access to the home file system on each host (it is not absolutly necessary. see below)


Installation & Configuration
============================

In order to install the TaskManager please follow the configuation steps:

** Copy entire TaskManager directory to a directory of your choice, e.g., /usr/local/opt

** Create virtual environment

# change to your Taskmanager path (set environmental variable)
cd <YOUR_TASKMANAGER_PATH>

# create virtual environment, install mysql client and create file which has to be sourced in order
# to use this application 
make

# activate virtual environment (environmental variables TASKMANAGERPATH and TASKMANAGER_VE_PATH will be set)
virtualenv taskmanagerVE

# create source file
make

# activate virtual environment (environmental variables TASKMANAGERPATH and TASKMANAGER_VE_PATH will be set)
source .taskmanagerrc

# install python packages
pip install -r requirements.txt


## Install mysql server
cd $TASKMANAGERPATH
make sql

## create database
cd $MYSQL_INSTANCE
scripts/mysql_install_db --defaults-file=$MYSQL_INSTANCE/taskmanagerdb.cnf

## start server
bin/mysqld_safe --defaults-file=$MYSQL_INSTANCE/taskmanagerdb.cnf

# password
root:mYSqlTmdB
tmadmin:mYsqLTmdB

## create password for root
bin/mysqladmin --defaults-file=$MYSQL_INSTANCE/taskmanagerdb.cnf -u root password 'mYSqlTmdB'

# connect to database (on database01)
bin/mysql --defaults-file=$MYSQL_INSTANCE/taskmanagerdb.cnf --user=root -p

# drop anonymous user in able to connect with bin/mysql --host=<HOST> --port=<PORT> --user=<USER> --database=<DATABASE> -p
# see: http://stackoverflow.com/questions/10299148/mysql-error-1045-28000-access-denied-for-user-billlocalhost-using-passw
mysql> DROP USER ''@'localhost';
mysql> DROP USER ''@'<YOUR HOST>';

# create user
mysql> CREATE USER 'tmadmin'@'%' IDENTIFIED BY 'mYsqLTmdB';

# create database
mysql> CREATE DATABASE IF NOT EXISTS taskmanagerdb;
mysql> GRANT ALL PRIVILEGES ON taskmanagerdb.* TO 'tmadmin'@'%' WITH GRANT OPTION;

# stop server
bin/mysqladmin --defaults-file=$MYSQL_INSTANCE/taskmanagerdb.cnf -u root -p shutdown

# connect as tmadmin to mysql server
bin/mysql --host=localhost --port=2114 --database=taskmanagerdb --user=tmadmin -p



2. (optional) Create a frozen version of several python programs with freeze. Modify and execute script
      
      cd <TASKMANAGERPATH>
      python scripts/makeFreezedVersion.py

For each program all necessary python libraries are copied to a single directory and a binary is
created. Therefore a load of python libraries over an intranet is not anymore necessary and it makes
the execution faster. Modify wrapper scripts in the directory bin/ in order to invoke the compiled
version respectively.

3. Set permissions of wrapper scripts in bin/ that every user can execute it.

4. Include all users who are allowed to use the TaskManager into

      etc/users

Format:

  <Username> <ROLE1>,<ROLE2>

in each row a user with his/her user roles.

In the current implementation roles are not considered, but each user has to have at least one role

5. Configure computer cluster by given information about each host in the cluster in tab delimited file

     etc/cluster.tab

or config file

      etc/cluster.cfg

but the latter option, in TaskDispatcher.py the line with self.initClusterByConfigFile() has to be uncommented.

6. Start TaskDispatcher

      cd Server
      python TaskDispatcher.py -e ../var/TaskDispatcherError.log -p 10101


Several Commands
================

Start TaskDispatcher

    bin/hRunTaskDispatcher

Get help

    bin/hRunJob -h

Get status of TaskManagerServer

      bin/hRunJob -s

Connect directly to TaskManagerServer and get help

      bin/hConnect -T help

Connect directly to TaskDispatcher and get help

      bin/hConnect fullhelp

Activate computer (if localhost is one of your hosts defined in etc/cluster.tab)

      bin/hConnect activatehost:localhost

Activate cluster

      bin/hConnect activatecluster

Send job to cluster

      bin/hRunJob "sleep 10"




Changelog
=========

current GIT version
-------------------


Since 0.9
---------
initial import

